// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package features

import (
	"context"

	"github.com/qlik-trial/go-service-kit/v29/features"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFeaturesClient creates a new instance of MockFeaturesClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeaturesClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeaturesClient {
	mock := &MockFeaturesClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFeaturesClient is an autogenerated mock type for the FeaturesClient type
type MockFeaturesClient struct {
	mock.Mock
}

type MockFeaturesClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeaturesClient) EXPECT() *MockFeaturesClient_Expecter {
	return &MockFeaturesClient_Expecter{mock: &_m.Mock}
}

// GetBoolGlobalFeature provides a mock function for the type MockFeaturesClient
func (_mock *MockFeaturesClient) GetBoolGlobalFeature(ctx context.Context, featureFlag string, contextOptions ...features.ContextOption) (bool, error) {
	var tmpRet mock.Arguments
	if len(contextOptions) > 0 {
		tmpRet = _mock.Called(ctx, featureFlag, contextOptions)
	} else {
		tmpRet = _mock.Called(ctx, featureFlag)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBoolGlobalFeature")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...features.ContextOption) (bool, error)); ok {
		return returnFunc(ctx, featureFlag, contextOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...features.ContextOption) bool); ok {
		r0 = returnFunc(ctx, featureFlag, contextOptions...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...features.ContextOption) error); ok {
		r1 = returnFunc(ctx, featureFlag, contextOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesClient_GetBoolGlobalFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoolGlobalFeature'
type MockFeaturesClient_GetBoolGlobalFeature_Call struct {
	*mock.Call
}

// GetBoolGlobalFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - featureFlag string
//   - contextOptions ...features.ContextOption
func (_e *MockFeaturesClient_Expecter) GetBoolGlobalFeature(ctx interface{}, featureFlag interface{}, contextOptions ...interface{}) *MockFeaturesClient_GetBoolGlobalFeature_Call {
	return &MockFeaturesClient_GetBoolGlobalFeature_Call{Call: _e.mock.On("GetBoolGlobalFeature",
		append([]interface{}{ctx, featureFlag}, contextOptions...)...)}
}

func (_c *MockFeaturesClient_GetBoolGlobalFeature_Call) Run(run func(ctx context.Context, featureFlag string, contextOptions ...features.ContextOption)) *MockFeaturesClient_GetBoolGlobalFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []features.ContextOption
		var variadicArgs []features.ContextOption
		if len(args) > 2 {
			variadicArgs = args[2].([]features.ContextOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockFeaturesClient_GetBoolGlobalFeature_Call) Return(value bool, err error) *MockFeaturesClient_GetBoolGlobalFeature_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockFeaturesClient_GetBoolGlobalFeature_Call) RunAndReturn(run func(ctx context.Context, featureFlag string, contextOptions ...features.ContextOption) (bool, error)) *MockFeaturesClient_GetBoolGlobalFeature_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoolTenantFeature provides a mock function for the type MockFeaturesClient
func (_mock *MockFeaturesClient) GetBoolTenantFeature(ctx context.Context, featureFlag string, tenantID string, contextOptions ...features.ContextOption) (bool, error) {
	var tmpRet mock.Arguments
	if len(contextOptions) > 0 {
		tmpRet = _mock.Called(ctx, featureFlag, tenantID, contextOptions)
	} else {
		tmpRet = _mock.Called(ctx, featureFlag, tenantID)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetBoolTenantFeature")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...features.ContextOption) (bool, error)); ok {
		return returnFunc(ctx, featureFlag, tenantID, contextOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, ...features.ContextOption) bool); ok {
		r0 = returnFunc(ctx, featureFlag, tenantID, contextOptions...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, ...features.ContextOption) error); ok {
		r1 = returnFunc(ctx, featureFlag, tenantID, contextOptions...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFeaturesClient_GetBoolTenantFeature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoolTenantFeature'
type MockFeaturesClient_GetBoolTenantFeature_Call struct {
	*mock.Call
}

// GetBoolTenantFeature is a helper method to define mock.On call
//   - ctx context.Context
//   - featureFlag string
//   - tenantID string
//   - contextOptions ...features.ContextOption
func (_e *MockFeaturesClient_Expecter) GetBoolTenantFeature(ctx interface{}, featureFlag interface{}, tenantID interface{}, contextOptions ...interface{}) *MockFeaturesClient_GetBoolTenantFeature_Call {
	return &MockFeaturesClient_GetBoolTenantFeature_Call{Call: _e.mock.On("GetBoolTenantFeature",
		append([]interface{}{ctx, featureFlag, tenantID}, contextOptions...)...)}
}

func (_c *MockFeaturesClient_GetBoolTenantFeature_Call) Run(run func(ctx context.Context, featureFlag string, tenantID string, contextOptions ...features.ContextOption)) *MockFeaturesClient_GetBoolTenantFeature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []features.ContextOption
		var variadicArgs []features.ContextOption
		if len(args) > 3 {
			variadicArgs = args[3].([]features.ContextOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockFeaturesClient_GetBoolTenantFeature_Call) Return(value bool, err error) *MockFeaturesClient_GetBoolTenantFeature_Call {
	_c.Call.Return(value, err)
	return _c
}

func (_c *MockFeaturesClient_GetBoolTenantFeature_Call) RunAndReturn(run func(ctx context.Context, featureFlag string, tenantID string, contextOptions ...features.ContextOption) (bool, error)) *MockFeaturesClient_GetBoolTenantFeature_Call {
	_c.Call.Return(run)
	return _c
}

// Initialized provides a mock function for the type MockFeaturesClient
func (_mock *MockFeaturesClient) Initialized() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Initialized")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFeaturesClient_Initialized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialized'
type MockFeaturesClient_Initialized_Call struct {
	*mock.Call
}

// Initialized is a helper method to define mock.On call
func (_e *MockFeaturesClient_Expecter) Initialized() *MockFeaturesClient_Initialized_Call {
	return &MockFeaturesClient_Initialized_Call{Call: _e.mock.On("Initialized")}
}

func (_c *MockFeaturesClient_Initialized_Call) Run(run func()) *MockFeaturesClient_Initialized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFeaturesClient_Initialized_Call) Return(b bool) *MockFeaturesClient_Initialized_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFeaturesClient_Initialized_Call) RunAndReturn(run func() bool) *MockFeaturesClient_Initialized_Call {
	_c.Call.Return(run)
	return _c
}
